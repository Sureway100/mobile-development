1-two types of variables in kt
changeable and unchangeable
val - unchangeable
var - changeable

2- note, in all of these... the type is infered and cannot be changed as soon as the compiler has picked one
var fish = 1    //int
fish ="string"    // not possible

3. SP means the text or whatever will be same across devices =>> Scale independent Pixels
----------------------------------------------------------------------------------------------
Code Of If Statements And When Expressions
Here you can find the code of the lectures "If Statements" and "When Expressions" with some more details:

fun main(){
    // Control Flows
    // If Statements
    var age = 17
    if(age >= 21){
        print("now you may drink in the US")
    }
    // Else If Statement - only executed if the if statement is not true
    else if(age >= 18){
        print("now you may vote")
    }
    // Else If Statement - only executed if the foregoing else if statement is not true
    else if (age >= 16){
        print("you now may drive")
    }
    // else is only executed if all of the foregoing statements weren't true
    else{
        print("you're too young")
    }
 
    // Kotlin’s "when" expression is the replacement of the switch statement
    // from other languages like C, C++, and Java.
    // It is compact and more powerful than switch statements.
    var season = 3
    when(season) {
        1 -> println("Spring")
        2 -> println("Summer")
        3 -> println("Fall")
        4 -> println("Winter")
        else -> println("Invalid Season")
    }
    var month = 3
    when(month) {
        1,2,3 -> println("Spring")
        in 4..6 -> println("Summer")
        in 7..9 -> println("Fall")
        in 10..12 -> println("Winter")
        else -> println("Invalid Season")
    }
 
    // challenge - translate the if statement with the age to a when expression
    when(age){
        // with the !in it's the same as saying not in ...
        !in 0..20  -> print("now you may drink in the US")
        in 18..20  -> print("now you may vote")
        16,17 -> print("you now may drive")
        else -> print("you're too young")
    }
 
    var x : Any = 13.37
    when(x) {
        is Int -> println("$x is an Int")
        !is Double -> println("$x is not Double")
        is String -> println("$x is a String")
        else -> println("$x is none of the above")
    }
}
----------------------------------------------------------------------------------------
LOOPS


Please find the code for the loops lectures here:



fun main(){
    var condition = true
    // Loops
    // While Loop
    // While loop executes a block of code repeatedly as long as a given condition is true
    while(condition) {
        // code to be executed
    }
 
    var y = 1
    while(y <= 10) {
        println("$y ")
        y++
    }
 
    // Do while loop
    // The do-while loop is similar to while loop except that it 
    // tests the condition at the end of the loop. 
    // This means that it will at least execute the body once
    var z = 1
    do {
        print("$z ")
        z++
    } while(z <= 10)
 
    var feltTemp = "cold"
    var roomTemp = 10
    while (feltTemp == "cold"){
        roomTemp++
        if(roomTemp == 20){
            feltTemp = "comfy"
            println("it's comfy now")
        }
    }
 
 
    // For Loop
    // A for-loop is used to iterate through ranges, arrays, collections, or anything 
    // that provides an iterator (You’ll learn about iterator, arrays, ranges and collections in a future lectur    e).
    for(num in 1..10) {
        print("$num ")
    }
 
    // infix notation
    for(i in 1 until 10) { // Same as - for(i in 1.until(10))
        print("$i ")
    }
 
    for(i in 10 downTo 1) {     // Same as - for(i in 10.downTo(1))
        print("$i ")
    }
 
    for(i in 1 until 10 step 2) { // Same as - for(i in 1.until(10).step(2))
        print("$i ")
    }
}


========================================================================================================
CLASSESSSSSSSS



Code - Classes
class Person constructor(_firstName: String, _lastName: String) { // or class Person constructor    (_firstName: String, _lastName: String) 
    // Member Variables (Properties) of the class
    var firstName: String
    var lastName: String
 
    // Initializer Block
    init {
        this.firstName = _firstName
        this.lastName = _lastName
 
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// create an object like so:
// val denis = Person("Denis", "Panjuta")
 
// Alternatively:
class Person (_firstName: String, _lastName: String) {
    // Member Variables (Properties) of the class
    var firstName: String = _firstName
    var lastName: String = _lastName
 
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Alternatively:
class Person(var firstName: String, var lastName: String) {
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Or even:
// whereby John and Doe will be default values 
class Person(var firstName: String = "John", var lastName: String= "Doe") {
    // Initializer Block
    init {
        println("Initialized a new Person object with firstName = $firstName and lastName = $lastName")
    }
}
 
// Create an object:
/*
    val john = Person()
    val johnPeterson = Person(lastname: "Peterson")
 
*/
 
class Person(var firstName: String, var lastName: String) {
    var age: Int? = null
    var hobby: String = "Watch Netflix"
    var myFirstName = firstName
 
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int): this(firstName, lastName)  {
        this.age = if(age > 0) age else throw IllegalArgumentException("Age must be greater than zero")
    }
 
    fun stateHobby(){
        println("$firstname \'s Hobby is: $hobby'" )
    }
}
 
// You can use primary or secondary Constructor to create an object
 
// Calls the primary constructor (Age will be null in this case)
val person1 = Person("Denis", "Panjuta")
 
// Calls the secondary constructor
val person2 = Person("Elon", "Musk", 48) 
 
 
 
// Having multiple overloads:
 
class Person(var firstName: String, var lastName: String) {
    var age: Int? = null
    var eyeColor: String? = null
    
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int): this(firstName, lastName)  {
        this.age = if(age > 0) age else throw IllegalArgumentException("Age must be greater than zero")
    }
 
    // Secondary Constructor
    constructor(firstName: String, lastName: String, age: Int, eyeColor: String): 
            this(firstName, lastName, age)  {
        this.eyeColor = eyeColor
    }
}
 
 
// SETTERS AND GETTERS
 
// User class with a Primary constructor that accepts
// three parameters
class Car(_brand: String, _model: String, _maxSpeed: Int) {
    // Properties of User class
    val brand: String = _brand         // Immutable (Read only)
    var model: String = _model  // Mutable
    var maxSpeed: Int = _maxSpeed       // Mutable
}
 
// Kotlin internally generates a default getter and setter for mutable properties, and a getter (only) for read-only properties.
 
It calls these getters and setters internally whenever 
// you access or modify a property using the dot(.) notation.
This is how it would look like internally
class Car(_brand: String, _model: String, _maxSpeed: Int) {
    val brand: String = _brand
        get() = field
    
    var model: String = _model
        get() = field
        set(value) {
            field = value
        }
    
    var maxSpeed: Int = _maxSpeed
        get() = field
        set(value) {
            field = value
        }
}
 
// value
// We use value as the name of the setter parameter. This is the default convention in Kotlin but you’re free to use any other name if you want.
// The value parameter contains the value that a property is assigned to. For example, when you write user.name = "Elon Musk", 
// the value parameter contains the assigned value "Elon Musk".
 
// 2. Backing Field (field)
// Backing field helps you refer to the property 
// inside the getter and setter methods. 
// This is required because if you use the property 
// directly inside the getter or setter then you’ll
// run into a recursive call which will generate 
// a StackOverflowError.
 
 
class Car() {
 
    lateinit var owner : String
 
    val myBrand: String = "BMW"
    // Custom getter
    get() {     
        return field.toLowerCase()
    }   
    
    
    // default setter and getter
    var myModel: String = "M5"
        private set
 
    var myMaxSpeed: Int = maxSpeed
        get() = field
        // Custom Setter
        set(value) {
            field = if(value > 0) value else throw IllegalArgumentException("_maxSpeed must be greater than zero")
    }
 
    init{
        this.myModel = "M3"
        this.owner = "Frank"
    }
}